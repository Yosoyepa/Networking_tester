# Archivo de configuración para networking_tester

general:
  project_name: "Networking Tester"
  version: "0.2.0"

logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s [%(levelname)-7s] [%(name)-20s] [%(funcName)s:%(lineno)d] %(message)s"
  file: "logs/networking_tester.log" # Relative to project root
  console_logging: true

capture:
  default_interface: "auto" # 'auto' o un nombre específico como 'eth0'
  # pcap_save_path: "data/captures/" # Example, if auto-saving captures

analysis:
  known_ports:
    80: "HTTP"
    443: "HTTPS"
    21: "FTP"
    22: "SSH"
    53: "DNS"
    # Add more common ports
  anomaly_detection:
    enabled: false
    rules: # Example simple rules
      - type: "high_traffic_source"
        threshold_packets: 1000 # Packets per minute from a single source
        alert_message: "High traffic detected from source IP {source_ip}"
  performance_metrics:
    rtt_threshold_ms: 100
    jitter_threshold_ms: 30

reporting:
  default_format: "json" # csv, json, console
  output_directory: "reports" # Relative to project root
  report_filename_template: "capture_report_{timestamp}.{format}"

storage:
  database_enabled: false
  database_type: "sqlite"
  database_name: "data/analysis_results.db" # Relative to project root

ai_monitoring:
  anomaly_detector_model_path: "data/models/ai_anomaly_detector.joblib" # Relative to project root
  anomaly_detector_scaler_path: "data/models/ai_anomaly_detector_scaler.joblib" # Relative to project root
  # qos_classifier_path: "data/models/qos_classifier_v1.onnx" # Example for future QoS ML model
  # performance_model_path: "data/models/performance_predictor_v1.joblib" # Example for future performance ML model
  enable_ai_analysis_on_completion: true # Whether to automatically run AI analysis after capture/pcap processing
  qos_rules:
    ef_small_packet_concern:
      enabled: true
      dscp_threshold: 46 # Minimum DSCP value to be considered high priority (e.g., EF)
      frame_length_threshold: 100 # Maximum frame length for a high priority packet to be considered "small"
  performance_rules: # New section for performance analyzer
    packet_size_categories:
      small_threshold: 100  # Bytes, packets <= this are "small"
      medium_threshold: 1000 # Bytes, packets > small_threshold and <= this are "medium", else "large"
    protocol_insights:
      enabled: true
      # Potentially add more specific rules here later, e.g., for TCP retransmissions if detectable
    # Example: Rule for high percentage of small packets (could indicate control traffic or fragmentation issues)
    small_packet_percentage_concern:
      enabled: true
      threshold_percentage: 60 # If >60% of packets are small, it might be a concern or noteworthy
      minimum_sample_size: 50 # Only apply if there are at least 50 packets
