#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Utility script to inspect report files generated by networking_tester."""

import json
import os
import sys
import argparse
from pathlib import Path

def print_report_summary(report_path):
    """Print a summary of a report file."""
    try:
        with open(report_path, 'r') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                print(f"Error: {report_path} is not a valid JSON file.")
                return False
        
        print(f"\n=== Report Summary: {os.path.basename(report_path)} ===\n")
        
        # Print statistics if available
        if "statistics" in data:
            print("Statistics:")
            stats = data["statistics"]
            if stats:
                for key, value in stats.items():
                    print(f"  {key}: {value}")
            else:
                print("  No statistics available")
        
        # Print packet data summary
        if "packet_analysis_data" in data:
            packets = data["packet_analysis_data"]
            print(f"\nPacket Analysis: {len(packets)} packets")
            if packets:
                print("\nSample Packets:")
                for i, packet in enumerate(packets[:3]):  # Show first 3 packets
                    print(f"\n  Packet {i+1}:")
                    for key, value in packet.items():
                        print(f"    {key}: {value}")
                
                if len(packets) > 3:
                    print(f"\n  ... and {len(packets) - 3} more packets")
        
        # Print AI analysis if available
        if "ai_analysis_results" in data:
            ai_results = data["ai_analysis_results"]
            print("\nAI Analysis Results:")
            if ai_results:
                for key, value in ai_results.items():
                    print(f"  {key}: {value}")
            else:
                print("  No AI analysis results available")
                
        return True
        
    except FileNotFoundError:
        print(f"Error: Report file {report_path} not found.")
        return False
    except Exception as e:
        print(f"Error inspecting report: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Inspect networking_tester report files")
    
    parser.add_argument("report_path", nargs="?", help="Path to the report file to inspect")
    parser.add_argument("-l", "--list", action="store_true", help="List available reports")
    
    args = parser.parse_args()
    
    # Determine reports directory
    project_root = Path(__file__).resolve().parent.parent
    reports_dir = project_root / "reports"
    
    # List available reports
    if args.list or not args.report_path:
        print(f"\nAvailable reports in {reports_dir}:")
        if os.path.exists(reports_dir):
            reports = [f for f in os.listdir(reports_dir) if f.endswith(".json") or f.endswith(".csv")]
            if reports:
                for i, report in enumerate(reports, 1):
                    print(f"{i}. {report}")
                
                # If no specific report was provided, ask the user to select one
                if not args.report_path:
                    try:
                        selection = input("\nEnter the number of the report to inspect (or 'q' to quit): ")
                        if selection.lower() in ('q', 'quit', 'exit'):
                            return
                        
                        index = int(selection) - 1
                        if 0 <= index < len(reports):
                            report_path = os.path.join(reports_dir, reports[index])
                            print_report_summary(report_path)
                        else:
                            print("Invalid selection.")
                    except ValueError:
                        print("Please enter a valid number.")
            else:
                print("No reports found.")
            
        else:
            print("Reports directory not found.")
        
    # Print specific report
    elif args.report_path:
        report_path = args.report_path
        
        # If path is not absolute, assume it's relative to reports directory
        if not os.path.isabs(report_path):
            report_path = os.path.join(reports_dir, report_path)
            
        print_report_summary(report_path)

if __name__ == "__main__":
    main()
